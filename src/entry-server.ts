import { createApp } from './main'
import { renderToString } from '@vue/server-renderer'
import { renderHeadToString } from '@vueuse/head'

export async function render(url: any, manifest: Record<string, string[]>, context = { host: '', ua: '' }): Promise<[unknown, string, string, string, string, string]> {
  const { app, router, head } = createApp()
  let renderError = null

  // set the router to the desired URL before rendering
  router.push(url)
  try {
    await router.isReady()
  } catch (e) {
    renderError = e
  }

  const matchedComponents = router.currentRoute.value.matched
  // no matched routes
  if (matchedComponents.some(m => m.name === '404')) {
    renderError = new Error(`404: ${url}`)
  }

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: { modules?: string[] } = {};
  let html = '';
  try {
    html = await renderToString(app, ctx)
  } catch (e) {
    renderError = e
  }
  const { headTags, htmlAttrs, bodyAttrs } = renderHeadToString(head)

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
  return [renderError, html, preloadLinks, headTags, htmlAttrs, bodyAttrs]
}

function renderPreloadLinks(modules: undefined | string[], manifest: Record<string, string[]>): string {
  let links = ''
  const seen = new Set()
  if (modules === undefined) throw new Error()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file: string): string {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else {
    return ''
  }
}